{
  "openapi": "3.0.3",
  "info": {
    "title": "Emotional Analysis API",
    "description": "API for managing emotions, colors, users, and API statistics. During initialization, the following test users are seeded:\n\n- **User:** `user@user.com` (Password: `user`)\n- **Admin:** `admin@admin.com` (Password: `admin`)\n\nThese roles can be used for testing the endpoints.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://arickor.com/comp4537/project/backend/v1"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Endpoints related to user authentication"
    },
    {
      "name": "user",
      "description": "Endpoints related to user management"
    },
    {
      "name": "color",
      "description": "Endpoints related to user-specific color and emotion data"
    },
    {
      "name": "analytics",
      "description": "Endpoints for API usage statistics"
    },
    {
      "name": "admin",
      "description": "Admin-specific endpoints"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": ["auth"],
        "summary": "User login",
        "description": "Authenticates a user and returns a JWT token. Use the seeded users (`user@user.com` and `admin@admin.com`) for testing.",
        "requestBody": {
          "description": "User login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "admin@admin.com" },
                  "password": { "type": "string", "example": "admin" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string" },
                    "userId": { "type": "integer" },
                    "userRole": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["auth"],
        "summary": "User logout",
        "description": "Log out the current user.",
        "responses": {
          "200": { "description": "Logout successful" },
          "403": { "description": "Unauthorized access" }
        }
      }
    },
    "/register": {
      "post": {
        "tags": ["user"],
        "summary": "Register a new user",
        "description": "Registers a new user in the system, sets a default role of 'user', and adds a security question and answer.",
        "requestBody": {
          "description": "User registration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "newuser@example.com" },
                  "password": { "type": "string", "example": "password123" },
                  "securityQuestion": {
                    "type": "string",
                    "example": "What is your favorite color?"
                  },
                  "answer": { "type": "string", "example": "Blue" }
                },
                "required": ["email", "password", "securityQuestion", "answer"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "User successfully registered" },
          "400": { "description": "User already exists or invalid input" },
          "500": { "description": "Server error during registration" }
        }
      }
    },
    "/get-security-question": {
      "post": {
        "tags": ["auth"],
        "summary": "Retrieve a user's security question",
        "description": "Fetch the security question for a given email from the `SecurityQuestions` table.",
        "requestBody": {
          "description": "User email to retrieve the security question",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "user@example.com" }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security question retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "question": { "type": "string", "example": "What is your favorite color?" }
                  }
                }
              }
            }
          },
          "404": { "description": "User not found" }
        }
      }
    },
    "/verify-security-answer": {
      "post": {
        "tags": ["auth"],
        "summary": "Verify a user's security answer",
        "description": "Verify the provided answer to the user's security question stored in the `SecurityQuestions` table.",
        "requestBody": {
          "description": "Email and answer for verification",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "user@example.com" },
                  "answer": { "type": "string", "example": "Blue" }
                },
                "required": ["email", "answer"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Answer verified successfully" },
          "401": { "description": "Incorrect answer" },
          "404": { "description": "User or security question not found" }
        }
      }
    },
    "/reset-password": {
      "post": {
        "tags": ["auth"],
        "summary": "Reset a user's password",
        "description": "Resets the user's password using their email. The new password is securely hashed and stored in the `Users` table.",
        "requestBody": {
          "description": "Email and new password details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "user@example.com" },
                  "newPassword": { "type": "string", "example": "newpassword123" }
                },
                "required": ["email", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Password reset successfully" },
          "400": { "description": "User not found or invalid input" },
          "500": { "description": "Server error during password reset" }
        }
      }
    },
    "/protected": {
      "get": {
        "tags": ["auth"],
        "summary": "Access protected route",
        "description": "Access a protected route with a valid JWT token.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer <JWT_TOKEN>"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access granted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Access granted" },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer", "example": 1 },
                        "email": { "type": "string", "example": "user@example.com" },
                        "userRole": { "type": "string", "example": "admin" }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": { "description": "Unauthorized access" }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/admin/users": {
      "get": {
        "tags": ["admin"],
        "summary": "Retrieve all users and their roles",
        "description": "Fetch a list of all users and their associated roles from the `Users` and `UserRoles` tables.",
        "responses": {
          "200": {
            "description": "List of users and roles retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "integer", "example": 1 },
                      "email": { "type": "string", "example": "admin@admin.com" },
                      "role": { "type": "string", "example": "admin" }
                    }
                  }
                }
              }
            }
          },
          "403": { "description": "Unauthorized access" },
          "500": { "description": "Server error while fetching users" }
        }
      }
    },
    "/color": {
      "get": {
        "tags": ["color"],
        "summary": "Get user emotions and associated colors",
        "description": "Fetch all emotions and their corresponding colors for a specific user.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token for authentication",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer <JWT_TOKEN>"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Emotions and colors retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "colors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "emotion": { "type": "string" },
                          "color": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": { "description": "Unauthorized access" },
          "500": { "description": "Failed to fetch emotions and colors" }
        }
      }
    },    
    "/color-by-emotion": {
      "post": {
        "tags": ["color"],
        "summary": "Get color for a specific emotion",
        "description": "Fetch the color associated with a specific emotion for the authenticated user.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token for authentication",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer <JWT_TOKEN>"
            }
          }
        ],
        "requestBody": {
          "description": "Emotion to fetch the color for",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emotion": { "type": "string", "example": "happy" }
                },
                "required": ["emotion"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Color retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "color": { "type": "string", "example": "#FFD700" }
                  }
                }
              }
            }
          },
          "403": { "description": "Unauthorized access" },
          "500": { "description": "Failed to fetch color" }
        }
      }
    },
    "/add-color": {
      "post": {
        "tags": ["color"],
        "summary": "Add a new color-emotion mapping",
        "description": "Add a new emotion-to-color mapping for a specific user.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token for authentication",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer <JWT_TOKEN>"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the emotion and color to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "integer", "example": 1 },
                  "emotion": { "type": "string", "example": "excited" },
                  "color": { "type": "string", "example": "#FF4500" }
                },
                "required": ["userId", "emotion", "color"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Color added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Color added successfully" }
                  }
                }
              }
            }
          },
          "400": { "description": "Color for this emotion already exists" },
          "500": { "description": "Failed to add color" }
        }
      }
    },
    "/edit-color": {
      "patch": {
        "tags": ["color"],
        "summary": "Edit an existing color-emotion mapping",
        "description": "Edit an emotion-to-color mapping for a specific user.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token for authentication",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer <JWT_TOKEN>"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the emotion and color to edit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "integer", "example": 1 },
                  "emotion": { "type": "string", "example": "excited" },
                  "color": { "type": "string", "example": "#00FF00" }
                },
                "required": ["userId", "emotion", "color"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Color edited successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Color updated successfully" }
                  }
                }
              }
            }
          },
          "500": { "description": "Failed to edit color" }
        }
      }
    },
    "/delete-color": {
      "delete": {
        "tags": ["color"],
        "summary": "Delete a color-emotion mapping",
        "description": "Delete an emotion-to-color mapping for a specific user.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token for authentication",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer <JWT_TOKEN>"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the emotion to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "integer", "example": 1 },
                  "emotion": { "type": "string", "example": "excited" }
                },
                "required": ["userId", "emotion"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Color deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Color deleted successfully" }
                  }
                }
              }
            }
          },
          "500": { "description": "Failed to delete color" }
        }
      }
    },
    "/increment-api-count": {
      "post": {
        "tags": ["analytics"],
        "summary": "Increment API call statistics",
        "description": "Updates the `APICallCountByUserId` and `EndpointStats` tables to track API usage.",
        "requestBody": {
          "description": "Details of the API call",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "integer", "example": 1 },
                  "endpoint": { "type": "string", "example": "/color" },
                  "method": { "type": "string", "example": "GET" }
                },
                "required": ["userId", "endpoint", "method"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "API usage successfully incremented" },
          "500": { "description": "Failed to update API statistics" }
        }
      }
    },    
    "/get-api-count": {
      "get": {
        "tags": ["analytics"],
        "summary": "Get API call statistics",
        "description": "Retrieve statistics from the `APICallCountByUserId` and `EndpointStats` tables.",
        "responses": {
          "200": {
            "description": "API usage statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": { "type": "integer", "example": 1 },
                          "api_count": { "type": "integer", "example": 42 }
                        }
                      }
                    },
                    "endpoints": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "endpoint": { "type": "string", "example": "/color" },
                          "method": { "type": "string", "example": "GET" },
                          "request_count": { "type": "integer", "example": 100 }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": { "description": "Failed to fetch API statistics" }
        }
      }
    }    
  }
}
